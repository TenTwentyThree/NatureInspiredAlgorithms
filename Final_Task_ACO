import numpy as np
import random
import time
from values import get_values
values = get_values()

global tspmap
tspmap = map

class antColony():
    class ant():

        def __init__(self,possible_locations,pheromone_map, size = 's'):
            """
            Initialite an ant with,

            init_location(int) : initial position of the ant
            possible_locations(List) : List of all possible possible_locations
            path_cost(int) : Cost of the path the ant has traversed,
            pheromone_map(List) : List of List, where pheromone_map[i][j] represents row i at column j
            Alpha(float) : determines impact of the pheromone_map in the path selection
            Beta(float ) : determines impact of the distance between node i and i+1 in the path selection
            first_pass(boolean) : determines if we are in the first iteration or not
            max_load : maximum capacity of truck
            demand : array demand of all nodes
            depot : at the time tuple of coordinates of the depot. default is (0,0)
            """
            self.init_location = values.depot_location
            self.possible_locations = possible_locations
            self.path = []
            self.path_cost = 0
            self.current_location = self.init_location
            self.pheromone_map = pheromone_map
            self.alpha = values.alpha
            self.beta = values.beta
            self.first_pass = True
            if size == 's':
                self.max_load = values.capacity_s
            if size == 'm':
                self.max_load = values.capacity_m
            if size == 'l':
                self.max_load = values.capacity_l
            if size == 'xl':
                self.max_load = values.capacity_xl
            self.delivered = 0
            self.demand = values.demand
            self.depot = values.depot_location
            self.update_path(self.init_location)


        # ---------------------------------------------SOLUTION CONSTRUCTION--------------------------------------#
        def create_path(self):
            """
            Create a path for the ant self
            """
            # as long as the list of Possible locations is not empty, we search for the next node
            # when delivered all possible packages, we return to the depot
            while self.possible_locations:
                if self.max_load == self.delivered:
                    next = self.depot
                    self.traverse(self.current_location, next)
                    break
                else:
                    next = self.pick_path()
                    self.traverse(self.current_location, next)
                    self.delivered += self.demand[next]

        def pick_path(self):
            """
            Pick a path from self.possible_locations and return it
            """
            # if we are in the first iteration, just take a random path
            if self.first_pass:
                self.first_pass = False
                return random.choice(self.possible_locations)


            # else compute the path by the ACO edge selection Heuristic
            # (pheromoneamount^alpha * (1/distance)^beta)/sum(all alowed moves)
            # attractiveness is the list of numerators computed by the numerator of the formula above
            attractiveness = []
            # denominator has to be computed
            denominator  = 0.0

            # for every location in the possible location, compute th likeliehood
            for possbible_next_location in self.possible_locations:
                # safe the values for the computation
                pheromone_amount = float(self.pheromone_map[self.current_location][possbible_next_location])
                distance = float(tspmap[self.current_location][possbible_next_location])

                # if (self.alpha == 0) and (self.beta == 0):
                # attractiveness.append(pheromone_amount*(1/distance))
                # append the numerator list 'attractiveness' with the numerator of the likelyhood
                attractiveness.append(pow(pheromone_amount, self.alpha)*pow(1/distance, self.beta))
            # Compute the denominator by adding up all possible attractivnesses
            denominator = float(sum(attractiveness))

            # we have to avoid zero devisions, so we compute the smallest number not zero, if the denominator is 0
            if denominator == 0.0:
                def next_up(x):
                    import math
                    import struct
                    # NaNs and positive infinity map to themselves.
                    if math.isnan(x) or (math.isinf(x) and x > 0):
                        return x

                    # 0.0 and -0.0 both map to the smallest +ve float.
                    if x == 0.0:
                        x = 0.0

                        n = struct.unpack('<q', struct.pack('<d', x))[0]

                        if n >= 0:
                            n += 1
                        else:
                            n -= 1
                    return struct.unpack('<d', struct.pack('<q', n))[0]

                for i in attractiveness:
                    attractiveness[i] = next_up(attractiveness[i])
                denominator = next_up(denominator)

            # fill the path Probability list with the computed likeliehoods
            pathProbabilities = []
            for i in range(len(self.possible_locations)):
                if denominator != 0.0:
                    pathProbabilities.append(attractiveness[i]/denominator)
                elif denominator == 0.0:
                    pathProbabilities.append(0)

            # Sample the next path from the probabilities
            toss = random.random()
            cummulative = 0

            for i in range(len(pathProbabilities)):
                if toss <= (pathProbabilities[i] + cummulative):
                    next_city = self.possible_locations[i]
                    return next_city
                cummulative += pathProbabilities[i]

            # next city is the city with the highest probability - Old solution
            # next_city = self.possible_locations[pathProbabilities.index(max(pathProbabilities))]


        # ---------------------------------------------SOLUTION CONSTRUCTION Ends--------------------------------------#
        def traverse(self,oldCity,newCity):
            """
            travel from the old node to the new node and update the ant parameters
            oldCity(int) : the current locations
            newCity(int) : the City we choose to visit next
            """
            self.update_path(newCity)
            self.update_pathCost(oldCity,newCity)
            self.current_location = newCity

        def update_path(self,newCity):
            """
            add the new city to the path and remove it from the possible_locations list
            """
            self.path.append(newCity)
            self.possible_locations.remove(newCity)

        def update_pathCost(self,oldCity,newCity):
            """
            add the cost of the path to the new node to the total path_cost
            """
            self.path_cost += tspmap[oldCity][newCity]

    def __init__(self, size = 's'):
        """
        initialize an ant Colony
        start(int) = the starting position of the
        ant_cont(int) = number of the ants in the colony
        Alpha(float) : determines impact of the pheromone_map in the path selection
        Beta(float ) : determines impact of the distance between node i and i+1 in the path selection
        pheromone_evaporation_coefficient(float) : how much pheromone evaporates in one iteration
        pheromone_constant(float) : Parameter to regulate the amount of pheromone that is added to the pheromone_map
        iterations(int) : numebr of iterations we run through
        """

        # Matrix of the pheromone amount over iterations
        self.pheromone_map = self.init_pheromone_map(len(tspmap))
        # Matrix of pheromone amount in iteration
        self.pheromone_map_iteration = self.init_pheromone_map(len(tspmap))

        self.start = values.depot_location
        self.ant_count = values.antnbr
        self.alpha = values.alpha
        self.beta = values.beta
        self.pheromone_evaporation_coefficient = values.evaporation_coefficient
        self.pheromone_constant = values.p_const
        self.iterations = values.iteration
        self.size = size

        # other initial variables
        self.first_pass = True
        # add ants to the colony
        self.colony = self.init_ants()
        # sbest cost we have seen so far
        self.shortest_distance = None
        # shortest path we have seen so far
        self.shortest_path_seen = None
        # best ant in the iteration
        self.shortest_ant_in_iteration = None
        self.FirsAnt = True

    def possible_locations(self):
        """
        create a list of all possible locations
        """
        possible_locations = list(range(len(tspmap)))
        return possible_locations

    def init_pheromone_map(self,value = 0.0):
        """
        create the pheromone map,
        has to be the same size of the tspmap
        """
        size = len(tspmap)
        p_map = []
        for row in range(size):
            p_map.append([float(value) for x in range(size)])
        return p_map

    def init_ants(self):
        """
        Create ants, if it is first called, else we just 'reset' the ants with the initial values
        """
        # If we are in the first iteration, initialize ants
        if self.first_pass:
            return [self.ant(self.possible_locations(), self.pheromone_map, self.size) for _ in range(self.ant_count)]
        # else reset every ant in the colony
        for ant in self.colony:
            ant.__init__(self.possible_locations(), self.pheromone_map, self.size)


    # ---------------------------------- EVAPORATION and INTENSIFICATION--------------------------------#
    def update_pheromone_map(self):
        """
        update the pheromone_map according to the formula
        (1-pheromone_evap_constant)*(pheromoneampunt at position i,j) + sum(pheromoneConstant/length of ant_k  if an ant traveld the edge, 0 otherwise)
        """

        pheromone_factor = 1 - self.pheromone_evaporation_coefficient

        # EVAPORATION update every entry in the pheromone_map
        for i in range(len(self.pheromone_map)):
            for j in range(len(self.pheromone_map)):
                if i != j:
                    self.pheromone_map[i][j] = self.pheromone_map[i][j] * pheromone_factor
                # if i=j we set the value to zero, because we dont want
                else:
                    self.pheromone_map[i][j] = 0
                # Intensification
                # add the new pheromone values from the current iteration to the old pheromone_map
                self.pheromone_map[i][j] += self.pheromone_map_iteration[i][j]

    def update_pheromone_map_iteration(self,ant):
        """
        update the pharomone_map_iteration with the computed pheromone values
        sum(pheromoneConstant/length of ant_k  if an ant traveld the edge, 0 otherwise)
        where ant_k it the ant we passed
        """
        path = ant.path

        # iterate through the path of the ant and update the pheromone_map_iteration at each
        # respective edge the ant has traveled
        for i in range(len(path)-1):
            current_pheromone_value = float(self.pheromone_map_iteration[path[i]][path[i + 1]])

            new_pheromone_amount = self.pheromone_constant/ant.path_cost

            # because the map is symetrical to the diagonal we only need to copy them with respect to the indizes
            self.pheromone_map_iteration[path[i]][path[i + 1]] = current_pheromone_value + new_pheromone_amount
            self.pheromone_map_iteration[path[i + 1]][path[i]] = current_pheromone_value + new_pheromone_amount

    # ---------------------------------- EVAPORATION and INTENSIFICATION ENDS--------------------------------#
    def mainloop(self):
        """
        mainloop which loops through the differnet steps:
        for ant k ∈ {1,...,m}
             construct a solution {solution finding}
        endfor
        forall pheromone values do
            decrease the value by a certain percentage {evaporation}
        endfor
        forall pheromone values corresponding to good solutions
        do
            increase the value {intensification}
        endfor
        """
        terminate = 0

        # Plotting Lists
        iteration_results = []
        iteration = []
        shortest_in_iteration = []

        while terminate < self.iterations:
            terminate += 1
            # SOLUTION FINDING
            for ant in self.colony:
                ant.create_path()

            # COMPUTE INTENSIFICATION VALUES
            for ant in self.colony:
                self.update_pheromone_map_iteration(ant)

                # set best path to an initial value
                if self.FirsAnt:
                    self.shortest_ant_in_iteration = ant.path_cost
                    self.FirsAnt = False

                if not self.shortest_distance:
                    self.shortest_distance = ant.path_cost
                if not self.shortest_path_seen:
                    self.shortest_path_seen = ant.path_cost

                # find the best path in all the ants in the iteration
                if ant.path_cost < self.shortest_ant_in_iteration:
                    self.shortest_ant_in_iteration = ant.path_cost
                # find overall best path
                if ant.path_cost < self.shortest_distance:
                    # fill Iteartion List for Plot
                    iteration_results.append(ant.path_cost)
                    iteration.append(len(shortest_in_iteration))

                    terminate = 0

                    self.shortest_distance = ant.path_cost
                    self.shortest_path_seen = ant.path
                    print("#-------------------# Shortest Path : ", ant.path_cost,"   #------#")

            print("Shortest Path: ", self.shortest_ant_in_iteration,"     Iterations left: ",self.iterations - terminate )
            # save shortest ant in iteration for plot
            shortest_in_iteration.append(self.shortest_ant_in_iteration)
            # restet FirstAnt for next iteration
            self.FirsAnt = True
            # EVAPORATION and INTENSIFCATION
            self.update_pheromone_map()

            if self.first_pass:
                self.first_pass = False

            # Reset the ants in the colony
            self.init_ants()

            # reset the pheromone_map_iteration matrix
            self.pheromone_map_iteration = self.init_pheromone_map()

        # return the shortest distance and the path of the Shortest distance
        return self.shortest_distance, self.shortest_path_seen, iteration_results, iteration, shortest_in_iteration

